/*************************************************************************
	> File Name: processSignal.c
	> Author:Jasonzhu 
	> Mail: jasonzhu_0314@163.com
	> Created Time: Thu 03 Jun 2021 05:39:28 PM CST
 ************************************************************************/

#include <stdio.h>
#include <unistd.h>
#include <signal.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>

pid_t cpid[2];

pid_t Fork() {
    pid_t cpid;
    cpid = fork();
    if (cpid < 0) {
        perror("fork");
        exit(1);
    }
    return cpid;
}

void FatherSigintHandler() {
    kill(cpid[0], SIGUSR1);
    kill(cpid[1], SIGUSR2);
    wait(0);
}

void Sigusr1Handler() {
    printf("shoudaoi\n");
    exit(0);
}

void Sigusr2Handler() {
    printf("shoudaoi\n");
    exit(0);
}

void SonSigintHandler() {
    printf("shoudaoi\n");
    exit(0);
}

void Sigaction(int num, void  (*func)()) {
    


    struct sigaction act, old_act;
    sigemptyset(&act.sa_mask);
    sigaddset(&act.sa_mask, num);
    act.sa_flags = 0;
    act.sa_handler = func;
    sigaction(num, &act, &old_act);
    printf("sigaction%d\n", num);

    sigaction(num, &old_act, NULL);
}

int main() {

    cpid[0] = Fork();
    
    if (cpid[0]) {
        cpid[1] = Fork();

        if (cpid[1]) {
            Sigaction(SIGINT, FatherSigintHandler);
        } else {
            Sigaction(SIGINT, SonSigintHandler);
            Sigaction(SIGUSR2, Sigusr2Handler);
        }
    } else {
        Sigaction(SIGINT, SonSigintHandler);
        Sigaction(SIGUSR1, Sigusr1Handler);
    }

    return 0;
}
